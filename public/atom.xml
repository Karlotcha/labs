<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Karlo's labs]]></title>
  <link href="http://karlotcha.herokuapp.com//atom.xml" rel="self"/>
  <link href="http://karlotcha.herokuapp.com//"/>
  <updated>2013-02-15T00:41:53+00:00</updated>
  <id>http://karlotcha.herokuapp.com//</id>
  <author>
    <name><![CDATA[Karlotcha Hoa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mondrian _ returns]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2013/02/12/mondrian-returns/"/>
    <updated>2013-02-12T23:04:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2013/02/12/mondrian-returns</id>
    <content type="html"><![CDATA[<!-- more -->
function generate_Mondrian(){
	// ************************************************************************************
	// VARIABLES
	// ************************************************************************************
	var main_svg = d3.select("body").append("svg:svg")
	  , WHITE    = '#F4EEE0'
	  , colors1	 = ['#D1DAC2', '#BBBFAA', '#AFAEA7', '#E2C903', '#1525B1', '#B40B01']
	  , colors2	 = ['#B6AD6C', '#DCC50C', '#C2AA66', '#790606', '#1F29B6', '#080A1B']
	  , size		  = 6
	  , total_size	  = 600
	  , white_p		  = 40
	  , black_p 	  = 10
	  
	// ************************************************************************************
	// FUNCTIONS HELPERS
	// ************************************************************************************
	var rand = function (n) {
			return Math.floor(Math.random()*n)
		}
		

	// ************************************************************************************
	// algorithm used to generate the mapping
	// ************************************************************************************
	  , Cell = function(){
			this.used  = false		
	  }
	  , Rect = function(x, y, w, h, t){
			this.x 		= x
			this.y 		= y
			this.width  = w
			this.height = h
			this.type   = t
			Rect.list.push(this)
	  }

	Cell.matrix	= []
	Rect.list 	= []
	matrix_size = Math.floor(total_size/size)
	  
	!function(){
		for(var i=0; i<matrix_size; i++) {
			Cell.matrix[i] = []
			for(var j=0; j<matrix_size; j++) {
				Cell.matrix[i][j] = new Cell()
			}
		}
		
		var normal_propa_p_h = 90
		  , normal_propa_p_v = 97
		  , horiz_p 	  	 = 1
		  , horiz_p2      	 = 1
		  , horiz_propa_p 	 = 99
		  , verti_p 	  	 = 1
		  , verti_propa_p 	 = 97
		
		function horiz_propa(){
			var w = 1
			  , h = 1
			if(j==15) horiz_propa_p = 10000
			if(j==20) horiz_p2 *= 2
			
			if(Cell.matrix[i+1]) h=2
			
			if (j>15 && j<25 && horiz_p2>rand(10000) ) {
				horiz_p2 = 1
				Cell.matrix[i][j].used     = true
				Cell.matrix[i+h-1][j].used = true
				loop:
				while(true) {
					new Rect(size*(j+w-1), size*(i), size, size*h, 'horiz')
					if(horiz_propa_p < rand(100)) break loop
					else {
						if((j+w)==80) horiz_propa_p = 80
						if(Cell.matrix[i][j+w]){
							Cell.matrix[i][j+w].used 	 = true
							Cell.matrix[i+h-1][j+w].used = true
							w ++
						} else break loop
					}
				}
			}
		}
		
		function verti_propa(){
			var w = 1
			  , h = 1

			if(Cell.matrix[i][j+1]) w=2
			
			if	(verti_p > rand(1000)) {
				Cell.matrix[i][j].used     = true
				Cell.matrix[i][j+w-1].used = true
				while(true) {
					if(verti_propa_p < rand(100)) break
					else {
						if(Cell.matrix[i+h]){
							new Rect(size*(j), size*(i+h-1), size*w, size, 'verti')
							Cell.matrix[i+h][j].used 	 = true
							Cell.matrix[i+h][j+w-1].used = true
							h ++
						} else break
					}
				}
			}
		}
		
		function normal_propa(){
			if(!Cell.matrix[i][j].used) {
				Cell.matrix[i][j].used = true
				var w = 1
				  , h = 1
				
				loop:
				while(true) {
					if(normal_propa_p_h < rand(100)) break loop
					else {
						if(Cell.matrix[i][j+w] && !Cell.matrix[i][j+w].used){
							Cell.matrix[i][j+w].used = true
							w ++
						} else break loop
					}
				}
				
				loop:
				while(true) {
					if(normal_propa_p_v < rand(100)) break loop
					else {
						if(Cell.matrix[i+h]) {
							for (var k =0; k<w; k++)
								if(Cell.matrix[i+h][j+k].used)
									break loop
							 
							for (var k =0; k<w; k++) Cell.matrix[i+h][j+k].used = true
							h ++
						} else break loop
					}
				}
				
				new Rect(size*j, size*i, size*w, size*h, 'normal')
				if (0==rand(3)) 
					new Rect(size*(j+rand(w)/2), size*(i+rand(h)/2), size*(rand(w)/2+1), size*(rand(h)/2+1), 'normal')
			}
		}

		for(var i=0; i<matrix_size; i++) for(var j=0; j<matrix_size; j++) horiz_propa()
		for(var i=0; i<matrix_size; i++) for(var j=0; j<matrix_size; j++) verti_propa()
		for(var i=0; i<matrix_size; i++) for(var j=0; j<matrix_size; j++) normal_propa()
	}()

	  
	// ************************************************************************************
	// draw rectangle
	// ************************************************************************************
	function draw(x, y, width, height, type) {
	
		var rect = main_svg.append("svg:rect")
				.attr('x', rand(600))
				.attr('y', rand(600))
				.attr('width'  ,60)
				.attr('height' , 60)

		  , color = ''
		  
		if (type == 'normal') {
			if ((white_p < rand(100))) {
				if (black_p < rand(100)) {
					color = colors1[rand(6)]
				} else color = 'black'
			} else color = WHITE
		}
		
		if (type != 'normal') {
			if (black_p < rand(100)) {
				color = colors2[rand(6)]
			} else color = 'black'
		}
		
		rect.attr('fill' , color)
			.transition()
				.duration(5000)
				.ease('cubic-out')
				.attr('x', x)
				.attr('y', y)
				.attr('width'  , width)
				.attr('height' , height)

	}

	// ************************************************************************************
	// MAIN SCRIPT
	// ************************************************************************************
	$('body').css('background', 'white')
	$('svg').css('height', 600)
	$('svg').css('width', 600)
	Rect.list.forEach(function(e){
		draw(e.x, e.y, e.width, e.height, e.type)
	})
	
	L = String(total_size) + ' '
	l = String(total_size/2) + ' '
	O = '0' + ' '
	
	main_svg.append("svg:polygon")
			.attr('points', O + O + O + l + l + O)
			.attr('fill' , 'white')
	main_svg.append("svg:polygon")
			.attr('points', O + l + O + L + l + L)
			.attr('fill' , 'white')
	main_svg.append("svg:polygon")
			.attr('points', l + O + L + O + L + l)
			.attr('fill' , 'white')
	main_svg.append("svg:polygon")
			.attr('points', L + l + l + L + L + L)
			.attr('fill' , 'white')

}

generate_Mondrian()

// press any key to generate again
$(document).live('keydown', function(){
	d3.select("svg").remove()
	generate_Mondrian()

})]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mandelbrot set]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2013/01/11/mandelbrot-set/"/>
    <updated>2013-01-11T22:48:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2013/01/11/mandelbrot-set</id>
    <content type="html"><![CDATA[// Use your mouse to zoom

<!-- more -->

// ************************************************************************************
// UI
// ************************************************************************************
$('body').prepend(	  '<div id="UI" style="background: grey; padding: 10px 5px 10px 5px; margin-bottom: 10px;"> '
					+ '<label for="x_min"> x_min : 	</label>	<input id = "x_min" type="number" value = "-1.5"  />' 
					+ '<label for="x_max"> x_max : 	</label>	<input id = "x_max" type="number" value = "0.5" />' 
					+ '<label for="y_min"> y_min : 	</label>	<input id = "y_min" type="number" value = "-1"   />' 
					+ '<label for="y_max"> y_max : 	</label>	<input id = "y_max" type="number" value = "1"    />' 
					+ '<label for="max_iteration"> luminosity : 	</label>	<input id = "max_iteration" type="number" value = "100"    />' 
					+ '<label for="acc"> accuracy : </label>	<input id = "acc" type="range" value = "100" min = "100" max="600" step = "100" />' 
					+  '</div>'
					+  '<div id="time" style="color: white;"> PRESS ENTER TO GENERATE </div>')
					
// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
	var x_min  	= parseFloat($('#x_min').attr('value'))
	  , x_max  	= parseFloat($('#x_max').attr('value'))
	  , y_min  	= parseFloat($('#y_min').attr('value'))
	  , y_max  	= parseFloat($('#y_max').attr('value'))
	  , width  	= 600
	  , height 	= 600

// ************************************************************************************
// MAIN FUNCTION
// ************************************************************************************
function generate() {
	// ************************************************************************************
	// VARIABLES
	// ************************************************************************************
	var start 	= Date.now()
	  , svg		= d3.select("body").append("svg:svg")
	  , x_acc  	= parseFloat($('#acc').attr('value'))
	  , y_acc  	= parseFloat($('#acc').attr('value'))
	  , max_iteration =  parseFloat($('#max_iteration').attr('value'))
	  
	x_min  	= parseFloat($('#x_min').attr('value'))
	x_max  	= parseFloat($('#x_max').attr('value'))
	y_min  	= parseFloat($('#y_min').attr('value'))
	y_max  	= parseFloat($('#y_max').attr('value'))
		
	// ************************************************************************************
	// FUNCTIONS HELPERS
	// ************************************************************************************
	  , x_x	   	= d3.scale.linear().domain([0, x_acc]).range([x_min, x_max])
	  , y_y		= d3.scale.linear().domain([0, y_acc]).range([y_min, y_max])
	  , x_px	= d3.scale.linear().domain([0, x_acc]).range([0, width])
	  , y_px	= d3.scale.linear().domain([0, y_acc]).range([0, height])
	  , color	= function(iteration) {
					var shade = 255*(iteration/max_iteration)
					return d3.rgb( shade, shade, shade).toString()
				}
	  , plot 	= function(i, j, iteration) {
					svg.append("svg:circle")
						.attr("cx", x_px(i))
						.attr("cy", y_px(j))
						.attr("r", width/(2*x_acc))
						.attr("fill" , color(iteration))
				}
	  
	// ************************************************************************************
	// MAIN SCRIPT
	// ************************************************************************************

	for (var i = 0; i < x_acc; i++) {
		for (var j = 0; j < y_acc; j++) {
			var x0 = x_x(i)
			  , y0 = y_y(j)
			  , x  = 0
			  , y  = 0
			  , iteration = 0
			  
			while ( x*x + y*y < 4  &&  iteration < max_iteration ) {
				xtemp = x*x - y*y + x0
				y = 2*x*y + y0
				x = xtemp
				iteration++
			}
			
			plot(i,j, iteration)
		}
	}
	
	var timer = (Date.now() - start)/1000
	$('#time').html('Generated in: '+ timer +'s')
}

// ************************************************************************************
// ZOOM
// ************************************************************************************
var X0, Y0, dif

$('svg')
	.live('mousedown', function(e0){
		var $rect = $('<div class="rect_selection" style="border: solid 1px; position:absolute; opacity: 0.5;"></div>')

		$rect.css('border-color', '#0033FF').css('background-color','#A8CAEC')

		Y0 = e0.pageY
		X0 = e0.pageX

		$('body').append($rect)
		$rect.css('left', X0).css('top', Y0)

		$('body').live('mousemove',function(e) {
			var X	 = e.pageX
			  , Y	 = e.pageY
			  , difX = X-X0
			  , difY = Y-Y0
			
			dif  = Math.max(Math.abs(difX), Math.abs(difY))

			if (difX>0 && difY>0) $rect.css('left', X0).width(dif).css('top', Y0).height(dif)
		})
		return false
	})
var zoom = function(e1){
				var Y1 = e1.pageY
				  , X1 = e1.pageX
				$('body').die('mousemove')
				$('.rect_selection').remove()
				
				var offset = $('svg').offset()
				  , x_min_pix = X0 - offset.left
				  , x_max_pix = x_min_pix + dif
				  , y_min_pix = Y0 - offset.top
				  , y_max_pix = y_min_pix + dif
				  , x_conv	  = d3.scale.linear().domain([0, width]).range([x_min, x_max])
				  , y_conv	  = d3.scale.linear().domain([0, height]).range([y_min, y_max])
				  , x_min_true	= x_conv(x_min_pix)
				  , x_max_true	= x_conv(x_max_pix)
				  , y_min_true	= y_conv(y_min_pix)
				  , y_max_true	= y_min_true + Math.abs(x_max_true - x_min_true)
				
				$('#x_min').attr('value', x_min_true)  
				$('#x_max').attr('value', x_max_true)  
				$('#y_min').attr('value', y_min_true)  
				$('#y_max').attr('value', y_max_true)  

				d3.select("svg").remove()
				generate()		
			}
$('.rect_selection').live('mouseup', zoom)
$('svg').live('mouseup', zoom)

// ************************************************************************************
// press enter to generate
// ************************************************************************************
$(document).live('keydown', function(e){
	if (e.which == 13) {
		d3.select("svg").remove()
		generate()
	}
})]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mondrian generator]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2013/01/04/mondrian-generator/"/>
    <updated>2013-01-04T01:21:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2013/01/04/mondrian-generator</id>
    <content type="html"><![CDATA[// Press any key to generate again

<!-- more -->

function generate_Mondrian(){
	// ************************************************************************************
	// FUNCTIONS HELPERS
	// ************************************************************************************
	var rand = function (n) {
			return Math.floor(Math.random()*n)
		}
		
	// ************************************************************************************
	// GLOBAL VARIABLES
	// ************************************************************************************
	var main_svg 	  = d3.select("body").append("svg:svg")
	  , border		  = 5
	  , smallest_rect = 50

	// ************************************************************************************
	// algorithm used to generate the mapping, absolute messy code, don't look at it, PLEASE 
	// ************************************************************************************
	  , Cell 		= function(){
			this.used  = false		
	  }
	  , Rect		= function(x, y, w, h){
			this.x 		= x
			this.y 		= y
			this.width  = w
			this.height = h
			Rect.list.push(this)
	  }

	Cell.matrix	= []
	Rect.list =[]
	  
	!function(){
		for(var i=0; i<10; i++) {
			Cell.matrix[i] = []
			for(var j=0; j<10; j++) {
				Cell.matrix[i][j] = new Cell()
			}
		}
		
		for(var i=0; i<10; i++) {
			for(var j=0; j<10; j++) {
				if(!Cell.matrix[i][j].used) {
					Cell.matrix[i][j].used = true
					var w = 1
					  , h = 1
					  
					while(true) {
						var r = rand(2)
						if(r) break
						else {
							if(Cell.matrix[i][j+w] && !Cell.matrix[i][j+w].used){
								Cell.matrix[i][j+w].used = true
								w ++
							}
						}
					}
					
					while(true) {
						r = rand(2)
						if(r) break
						else {
							if(Cell.matrix[i+h]){
								for (var k =0; k<w; k++) Cell.matrix[i+h][j+k].used = true
								h ++
							}
						}
					}
					
					var rect_total = smallest_rect + 2*border
					  , x 		   = rect_total*j + border
					  , y		   = rect_total*i + border
					  , width	   = rect_total*w - 2*border
					  , height	   = rect_total*h - 2*border
						
					
					new Rect(x, y, width, height)
				}
			}
		}
		
		
	}();

	  
	// ************************************************************************************
	// generate rectangle
	// ************************************************************************************
	function generate(x, y, width, height) {
		var rect = main_svg.append("svg:rect")
				.attr('x', x)
				.attr('y', y)
				.attr('width'  , width)
				.attr('height' , height)
				.attr('fill' , 'white')
				.style("opacity", 0)

		  , c = rand(28)
		  , color = ''
		if (c == 0) 	 color = 'black'
		else if (c == 1) color = 'red'
		else if (c == 2) color = 'blue'
		else if (c == 3) color = 'yellow'
		else 			 color = 'white'
		
		rect.transition()
				.delay(2000)
				.duration(1000)
				.ease(Math.sqrt)
					.style("opacity", 1)
			.transition()
				.delay(3000)
				.duration(1000)
				.ease(Math.sqrt)
					.attr('fill' , color)
		
		main_svg.append("svg:rect")
			.attr('x', x-border)
			.attr('y', y-border)
			.attr('fill' , 'black')
			.attr('height' , border)
			.transition()
			.duration(1000)
				.attr('width'  , width + 2*border)
		main_svg.append("svg:rect")
			.attr('x', x + width)
			.attr('y', y)
			.attr('fill' , 'black')
			.attr('width'  , border)
			.transition()
			.duration(1000)
			.delay(1000)
				.attr('height' , height + border)
		main_svg.append("svg:rect")
			.attr('x', x -border)
			.attr('y', y)
			.attr('width'  , border)
			.attr('fill' , 'black')
			.transition()
			.duration(1000)
				.attr('height' , height + border)
		main_svg.append("svg:rect")
			.attr('x', x)
			.attr('y', y + height)
			.attr('height' , border)
			.attr('fill' , 'black')
			.transition()
			.duration(1000)	
			.delay(1000)
				.attr('width'  , width)
		
	}

	// ************************************************************************************
	// MAIN SCRIPT
	// ************************************************************************************
	$('body').css('background', 'grey')

	Rect.list.forEach(function(e){
		generate(e.x, e.y, e.width, e.height)
	})
}
   
generate_Mondrian()

// press any key to generate again
$(document).live('keydown', function(){
	d3.select("svg").remove()
	generate_Mondrian()
})]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spark (2)]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/27/spark-2/"/>
    <updated>2012-12-27T13:49:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/27/spark-2</id>
    <content type="html"><![CDATA[<!-- more -->
// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
	
  , spark = function () {
		var cx = Math.cos((Date.now() - start)/1000)*200 + 400
		  , cy = Math.sin((Date.now() - start)/1000)*200 + 300

		main_svg.append("svg:circle")
		.attr("cx", cx)
		.attr("cy", cy)
		.attr("r", 1)
		.attr("fill" , 'yellow')	
		.style("opacity", 1)
		.transition()
			.duration(1500)
				.ease(Math.sqrt)
				.attr("cx", cx + rand(80) - 40)
				.attr("cy", cy + rand(80) - 40)
				.style("fill", 'red')
				.remove();
  }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	spark()
	spark()
	spark()
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['circling' mouse]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/27/circling-mouse/"/>
    <updated>2012-12-27T00:54:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/27/circling-mouse</id>
    <content type="html"><![CDATA[<!-- more -->
// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg").on("mousemove", sparking)
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

function sparking() {
	var m = d3.svg.mouse(this);

	main_svg.append("svg:circle")
	.attr("cx", m[0])
	.attr("cy", m[1])
	.attr("r", 1e-6)
	.style("stroke", 'red')
	.style("stroke-opacity", 1)
	.transition()
		.duration(2000)
			.ease(Math.sqrt)
			.attr("r", 10)
			.style("stroke", 'blue')
	.transition()
		.duration(2000).delay(1500)
			.style("stroke-opacity", 1e-6)
			.remove();
}]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[player: prototype]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/12/player-prototype/"/>
    <updated>2012-12-12T00:39:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/12/player-prototype</id>
    <content type="html"><![CDATA[// Use the arrow keys to move!

<!-- more -->

// ************************************************************************************
// PLAYER CLASS
// ************************************************************************************
function Player () {
	this.x = 100
	this.y = 100
	this.alpha = 0
	
	this.svg  = main_svg.append("svg:rect")
						.attr('x', this.x)
						.attr('y', this.y)
						.attr('width'  , 40)
						.attr('height' , 10)
						.attr('id', 'player1')	
	this.svg.attr('fill' , 'white')		
}

Player.prototype.move 	= function (direction) {
	if (direction == 'up') 		{ 
		this.x += 1*Math.cos(this.alpha*Math.PI/180)
		this.y += 1*Math.sin(this.alpha*Math.PI/180)
	}
	else if (direction == 'down') 	{ 
		this.x -= 1*Math.cos(this.alpha*Math.PI/180)
		this.y -= 1*Math.sin(this.alpha*Math.PI/180)
	}
	else if (direction == 'left') 	{ 
		this.alpha -= 1
	}
	else if (direction == 'right') 	{ 
		this.alpha += 1
	}
	
	this.svg.attr('x', this.x)
	this.svg.attr('y', this.y)
	cx = this.x + 20
	cy = this.y + 5
	this.svg.attr('transform' , 'rotate(' + this.alpha +' '+ cx +' '+ cy +')')	
}

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , player1 	= new Player()
  , keys 		= {}
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

// keyboard controls
$(document).live('keydown', function(e){
    keys[e.which] = true
	return false
})

$(document).live('keyup', function(e){
	delete keys[e.which]
})

setInterval(function() {
	if (keys[38]) player1.move('up')
	if (keys[40]) player1.move('down')
	if (keys[37]) player1.move('left')
	if (keys[39]) player1.move('right')
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sparking mouse]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/04/sparking-mouse/"/>
    <updated>2012-12-04T23:49:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/04/sparking-mouse</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (X, Y, e) {
	this.x = X
	this.x0 = X
	this.y = Y
	this.y0 = Y
	this.e = e

	this.svg  = main_svg.append("svg:circle")
						.attr('cx', this.x)
						.attr('cy', this.y)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	this.start = Date.now()
	
	this.t = (this.start - start)/1000
	
	this.coeffX  = (rand(this.start*2) - this.start)/this.start
	this.coeffY  = (rand(this.start*2) - this.start)/this.start
	
	this.index = Point.list.length
	Point.list[this.index] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1000

	if (t>2 || (this.e != 1 && t>1)) {
		this.svg.remove()
		delete Point.list[0]
	} else {
	
		
		if (this.e == 1) {
			this.x += this.coeffX*rand(t*2+1)*0.9
			this.y += this.coeffY*rand(t*2+1)*0.9
		} else {
			this.x = this.x0 + this.coeffX*rand(t*7)*20
			this.y = this.y0 + this.coeffY*rand(t*7)*20
		}
		
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', this.y)
		
		if (this.e == 1) {
			this.svg.attr('fill' , d3.rgb(
				  155 - t*90
				, 25 - t*125
				, 255
				).toString())
		} else {
			this.svg.attr('fill' , d3.rgb(
			  255
			, (255 - t*120)%256
			, (125  - t*155)%256
			).toString())	
		}
	}
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

$('body').live('mousemove', function(e){
	X = e.pageX
	Y = e.pageY
	
	new Point(X, Y, 1)
	return false
})

$('body').live('mousedown', function(e){
	X = e.pageX
	Y = e.pageY
	
	for (var i = 0; i<30; i++) new Point(X, Y, 2)
	return false
})

setInterval(function() {
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spark]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/11/28/spark/"/>
    <updated>2012-11-28T18:45:00+00:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/11/28/spark</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point () {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', 0)
						.attr('cy', 0)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	this.start = Date.now()
	
	this.t = (this.start - start)/1000
	
	this.x = Math.cos(this.t)*200 + 400
	this.y = Math.sin(this.t)*200 + 300
	
	this.coeffX  = (rand(this.start*2) - this.start)/this.start
	this.coeffY  = (rand(this.start*2) - this.start)/this.start
	
	this.index = Point.list.length
	Point.list[this.index] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1000

	if (t>2) {
		this.svg.remove()
		delete Point.list[0]
	} else {
		this.x = this.x + this.coeffX*rand(t*2+1)*0.9
		this.y = this.y + this.coeffY*rand(t*2+1)*0.9
		
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', this.y)
		
		this.svg.attr('fill' , d3.rgb(
			  255
			, (255 - t*100)%256
			, (125  - t*125)%256
			).toString())
	}
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	new Point()
	new Point()
	new Point()
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[symetria]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/symetria/"/>
    <updated>2012-09-30T03:22:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/symetria</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy, sym) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff  = 120
	this.coeff2 = Math.random()
	
	this.sym = sym

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1250

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	
	if (this.sym == 0) {
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', this.y)
	} else if (this.sym == 1) {
		this.svg.attr('cx', 750 - this.x)
		this.svg.attr('cy', 750 - this.y)
	} else if (this.sym == 2) {
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', 750 - this.y)
	} else if (this.sym == 3) {
		this.svg.attr('cx', 750 - this.x)
		this.svg.attr('cy', this.y)
	}
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<200) {
		for (var j = 0; j<4; j++){
			new Point(150, 150, j)
			new Point(150, 150, j)
		}
		i++
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[parametric 3D]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/parametric-3d/"/>
    <updated>2012-09-30T02:59:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/parametric-3d</id>
    <content type="html"><![CDATA[<!-- more -->


// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff  = 150
	this.coeff2 = Math.random()

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1250

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<200) {
		new Point(600, 400)
		new Point(600, 400)
		new Point(600, 400)
		new Point(600, 400)
		new Point(600, 400)
		i++
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[let's randomize them all!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/lets-randomize-them-all/"/>
    <updated>2012-09-30T02:34:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/lets-randomize-them-all</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff  = 150
	this.coeff2 = Math.random()

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/700

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 7)*this.coeff*this.coeff2
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 7)*this.coeff*this.coeff2
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<400) {
		new Point(600, 400)
		i++
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinus and cosinus love you forever]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-and-cosinus-love-you-forever/"/>
    <updated>2012-09-30T02:22:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-and-cosinus-love-you-forever</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff = 150

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 5)*this.coeff
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 5)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<500) {
		i++
		new Point(600, 400)
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 10);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinus slick]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-slick/"/>
    <updated>2012-09-30T00:01:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-slick</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff = 70

	this.start = Date.now()
						
	Point.list.push(this)
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + t*this.coeff
	this.y = this.y0 + Math.sin(t)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
d3.timer(function() {

	new Point(0, 200+rand(400))
	new Point(0, 200+rand(400))
	new Point(0, 200+rand(400))

	Point.list.forEach(function(thiz, i){thiz.move()})
});

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[circles genesis]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/circles-genesis/"/>
    <updated>2012-09-30T00:00:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/circles-genesis</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	var jet = rand(5)
	
	if 		(jet==0)	this.coeff = 30
	else if (jet==1)	this.coeff = 50
	else if (jet==2)	this.coeff = 70
	else if (jet==3)	this.coeff = 90
	else if (jet==4)	this.coeff = 110
	
	this.start = Date.now()
						
	Point.list.push(this)
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.cos(t)*this.coeff
	this.y = this.y0 + Math.sin(t)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
d3.timer(function() {
	new Point(600, 400)
	Point.list.forEach(function(thiz, i){thiz.move()})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[let's add other directions!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/27/lets-add-other-directions/"/>
    <updated>2012-09-27T00:01:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/27/lets-add-other-directions</id>
    <content type="html"><![CDATA[<!-- more -->

function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	if (rand(2)==0)	this.svg.attr('fill' , 'grey')	
	else			this.svg.attr('fill' , 'blue')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
						
	Point.list.push(this)
}

Point.prototype.move 	= function (v, l, direction) {
	var elapsed = Date.now() - start
	  , l = l || 800
	
	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	switch(direction) {
		case 0:
			this.x += rand(v)
			this.y += rand(v)
		break;
		case 1:
			this.x -= rand(v)
			this.y += rand(v)
		break;
		case 2:
			this.x += rand(v)
			this.y -= rand(v)
		break;
		case 3:
			this.x -= rand(v)
			this.y -= rand(v)
		break;
		case 4:
			this.x += rand(v)
		break;
		case 5:
			this.x -= rand(v)
		break;
		case 6:
			this.y += rand(v)
		break;
		case 7:
			this.y -= rand(v)
		break;

	}
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
var speeds  	= []
  , distances	= []
  , directions 	= []

for (var i =0; i<4000; i++) {
	speeds.push(rand(200)+1)
	distances.push(rand(2000)+1000)
	directions.push(rand(8))
	new Point(rand(20)+500, rand(20)+500)
}


d3.timer(function() {
	Point.list.forEach(function(thiz, i){thiz.move(speeds[i], distances[i], directions[i])})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my very first particules]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/25/my-very-first-particules/"/>
    <updated>2012-09-25T22:11:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/25/my-very-first-particules</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	if (rand(2)==0)	this.svg.attr('fill' , 'grey')	
	else			this.svg.attr('fill' , 'blue')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
						
	Point.list.push(this)
}

Point.prototype.move 	= function (v, l) {
	var elapsed = Date.now() - start
	  , l = l || 3000
	
	this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + (elapsed/v)%l
	this.y = this.y0 + (elapsed/v)%l
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
var speeds  	= []
  , distances	= []

for (var i =0; i<4000; i++) {
	speeds.push(rand(20)+1)
	distances.push(rand(2000)+1000)
	new Point(rand(800)-800, rand(800))
}


d3.timer(function() {
	Point.list.forEach(function(thiz, i){thiz.move(speeds[i], distances[i])})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/21/welcome/"/>
    <updated>2012-09-21T22:16:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/21/welcome</id>
    <content type="html"><![CDATA[<p>Welcome adventurer! This is my blog, I post some stuff here.
Not sure about what you will find... Have fun!</p>
]]></content>
  </entry>
  
</feed>
