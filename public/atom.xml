<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Karlo's labs]]></title>
  <link href="http://karlotcha.herokuapp.com//atom.xml" rel="self"/>
  <link href="http://karlotcha.herokuapp.com//"/>
  <updated>2012-09-30T02:45:19+01:00</updated>
  <id>http://karlotcha.herokuapp.com//</id>
  <author>
    <name><![CDATA[Karlotcha Hoa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[let's randomize them all!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/lets-randomize-them-all/"/>
    <updated>2012-09-30T02:34:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/lets-randomize-them-all</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff  = 150
	this.coeff2 = Math.random()

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/700

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 5)*this.coeff*this.coeff2
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 5)*this.coeff*this.coeff2
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	i++
	if (i<300) new Point(600, 400)
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinus and cosinus love you forever]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-and-cosinus-love-you-forever/"/>
    <updated>2012-09-30T02:22:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-and-cosinus-love-you-forever</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff = 150

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 5)*this.coeff
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 5)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	i++
	if (i<500) new Point(600, 400)
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 10);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinus slick]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-slick/"/>
    <updated>2012-09-30T00:01:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-slick</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff = 70

	this.start = Date.now()
						
	Point.list.push(this)
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + t*this.coeff
	this.y = this.y0 + Math.sin(t)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
d3.timer(function() {

	new Point(0, 200+rand(400))
	new Point(0, 200+rand(400))
	new Point(0, 200+rand(400))

	Point.list.forEach(function(thiz, i){thiz.move()})
});

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[circles genesis]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/circles-genesis/"/>
    <updated>2012-09-30T00:00:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/circles-genesis</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	var jet = rand(5)
	
	if 		(jet==0)	this.coeff = 30
	else if (jet==1)	this.coeff = 50
	else if (jet==2)	this.coeff = 70
	else if (jet==3)	this.coeff = 90
	else if (jet==4)	this.coeff = 110
	
	this.start = Date.now()
						
	Point.list.push(this)
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.cos(t)*this.coeff
	this.y = this.y0 + Math.sin(t)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
d3.timer(function() {
	new Point(600, 400)
	Point.list.forEach(function(thiz, i){thiz.move()})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[let's add other directions!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/27/lets-add-other-directions/"/>
    <updated>2012-09-27T00:01:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/27/lets-add-other-directions</id>
    <content type="html"><![CDATA[<!-- more -->

function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	if (rand(2)==0)	this.svg.attr('fill' , 'grey')	
	else			this.svg.attr('fill' , 'blue')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
						
	Point.list.push(this)
}

Point.prototype.move 	= function (v, l, direction) {
	var elapsed = Date.now() - start
	  , l = l || 800
	
	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	switch(direction) {
		case 0:
			this.x += rand(v)
			this.y += rand(v)
		break;
		case 1:
			this.x -= rand(v)
			this.y += rand(v)
		break;
		case 2:
			this.x += rand(v)
			this.y -= rand(v)
		break;
		case 3:
			this.x -= rand(v)
			this.y -= rand(v)
		break;
		case 4:
			this.x += rand(v)
		break;
		case 5:
			this.x -= rand(v)
		break;
		case 6:
			this.y += rand(v)
		break;
		case 7:
			this.y -= rand(v)
		break;

	}
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
var speeds  	= []
  , distances	= []
  , directions 	= []

for (var i =0; i<4000; i++) {
	speeds.push(rand(200)+1)
	distances.push(rand(2000)+1000)
	directions.push(rand(8))
	new Point(rand(20)+500, rand(20)+500)
}


d3.timer(function() {
	Point.list.forEach(function(thiz, i){thiz.move(speeds[i], distances[i], directions[i])})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my very first particules]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/25/my-very-first-particules/"/>
    <updated>2012-09-25T22:11:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/25/my-very-first-particules</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	if (rand(2)==0)	this.svg.attr('fill' , 'grey')	
	else			this.svg.attr('fill' , 'blue')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
						
	Point.list.push(this)
}

Point.prototype.move 	= function (v, l) {
	var elapsed = Date.now() - start
	  , l = l || 3000
	
	this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + (elapsed/v)%l
	this.y = this.y0 + (elapsed/v)%l
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
var speeds  	= []
  , distances	= []

for (var i =0; i<4000; i++) {
	speeds.push(rand(20)+1)
	distances.push(rand(2000)+1000)
	new Point(rand(800)-800, rand(800))
}


d3.timer(function() {
	Point.list.forEach(function(thiz, i){thiz.move(speeds[i], distances[i])})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/21/welcome/"/>
    <updated>2012-09-21T22:16:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/21/welcome</id>
    <content type="html"><![CDATA[<p>Welcome adventurer! This is my blog, I post some stuff here.
Not sure about what you will find... Have fun!</p>
]]></content>
  </entry>
  
</feed>
