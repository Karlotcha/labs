<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Karlo's labs]]></title>
  <link href="http://karlotcha.herokuapp.com//atom.xml" rel="self"/>
  <link href="http://karlotcha.herokuapp.com//"/>
  <updated>2012-12-27T13:54:35+01:00</updated>
  <id>http://karlotcha.herokuapp.com//</id>
  <author>
    <name><![CDATA[Karlotcha Hoa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[spark (2)]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/27/spark-2/"/>
    <updated>2012-12-27T13:49:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/27/spark-2</id>
    <content type="html"><![CDATA[<!-- more -->
// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
	
  , spark = function () {
		var cx = Math.cos((Date.now() - start)/1000)*200 + 400
		  , cy = Math.sin((Date.now() - start)/1000)*200 + 300

		main_svg.append("svg:circle")
		.attr("cx", cx)
		.attr("cy", cy)
		.attr("r", 1)
		.attr("fill" , 'yellow')	
		.style("opacity", 1)
		.transition()
			.duration(1500)
				.ease(Math.sqrt)
				.attr("cx", cx + rand(80) - 40)
				.attr("cy", cy + rand(80) - 40)
				.style("fill", 'red')
				.remove();
  }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	spark()
	spark()
	spark()
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['circling' mouse]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/27/circling-mouse/"/>
    <updated>2012-12-27T00:54:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/27/circling-mouse</id>
    <content type="html"><![CDATA[<!-- more -->
// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg").on("mousemove", sparking)
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

function sparking() {
	var m = d3.svg.mouse(this);

	main_svg.append("svg:circle")
	.attr("cx", m[0])
	.attr("cy", m[1])
	.attr("r", 1e-6)
	.style("stroke", 'red')
	.style("stroke-opacity", 1)
	.transition()
		.duration(2000)
			.ease(Math.sqrt)
			.attr("r", 10)
			.style("stroke", 'blue')
	.transition()
		.duration(2000).delay(1500)
			.style("stroke-opacity", 1e-6)
			.remove();
}]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[player: prototype]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/12/player-prototype/"/>
    <updated>2012-12-12T00:39:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/12/player-prototype</id>
    <content type="html"><![CDATA[<!-- more -->
// use the arrow keys to move!

// ************************************************************************************
// PLAYER CLASS
// ************************************************************************************
function Player () {
	this.x = 100
	this.y = 100
	this.alpha = 0
	
	this.svg  = main_svg.append("svg:rect")
						.attr('x', this.x)
						.attr('y', this.y)
						.attr('width'  , 40)
						.attr('height' , 10)
						.attr('id', 'player1')	
	this.svg.attr('fill' , 'white')		
}

Player.prototype.move 	= function (direction) {
	if (direction == 'up') 		{ 
		this.x += 1*Math.cos(this.alpha*Math.PI/180)
		this.y += 1*Math.sin(this.alpha*Math.PI/180)
	}
	else if (direction == 'down') 	{ 
		this.x -= 1*Math.cos(this.alpha*Math.PI/180)
		this.y -= 1*Math.sin(this.alpha*Math.PI/180)
	}
	else if (direction == 'left') 	{ 
		this.alpha -= 1
	}
	else if (direction == 'right') 	{ 
		this.alpha += 1
	}
	
	this.svg.attr('x', this.x)
	this.svg.attr('y', this.y)
	cx = this.x + 20
	cy = this.y + 5
	this.svg.attr('transform' , 'rotate(' + this.alpha +' '+ cx +' '+ cy +')')	
}

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , player1 	= new Player()
  , keys 		= {}
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

// keyboard controls
$(document).live('keydown', function(e){
    keys[e.which] = true
	return false
})

$(document).live('keyup', function(e){
	delete keys[e.which]
})

setInterval(function() {
	if (keys[38]) player1.move('up')
	if (keys[40]) player1.move('down')
	if (keys[37]) player1.move('left')
	if (keys[39]) player1.move('right')
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sparking mouse]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/12/04/sparking-mouse/"/>
    <updated>2012-12-04T23:49:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/12/04/sparking-mouse</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (X, Y, e) {
	this.x = X
	this.x0 = X
	this.y = Y
	this.y0 = Y
	this.e = e

	this.svg  = main_svg.append("svg:circle")
						.attr('cx', this.x)
						.attr('cy', this.y)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	this.start = Date.now()
	
	this.t = (this.start - start)/1000
	
	this.coeffX  = (rand(this.start*2) - this.start)/this.start
	this.coeffY  = (rand(this.start*2) - this.start)/this.start
	
	this.index = Point.list.length
	Point.list[this.index] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1000

	if (t>2 || (this.e != 1 && t>1)) {
		this.svg.remove()
		delete Point.list[0]
	} else {
	
		
		if (this.e == 1) {
			this.x += this.coeffX*rand(t*2+1)*0.9
			this.y += this.coeffY*rand(t*2+1)*0.9
		} else {
			this.x = this.x0 + this.coeffX*rand(t*7)*20
			this.y = this.y0 + this.coeffY*rand(t*7)*20
		}
		
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', this.y)
		
		if (this.e == 1) {
			this.svg.attr('fill' , d3.rgb(
				  155 - t*90
				, 25 - t*125
				, 255
				).toString())
		} else {
			this.svg.attr('fill' , d3.rgb(
			  255
			, (255 - t*120)%256
			, (125  - t*155)%256
			).toString())	
		}
	}
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

$('body').live('mousemove', function(e){
	X = e.pageX
	Y = e.pageY
	
	new Point(X, Y, 1)
	return false
})

$('body').live('mousedown', function(e){
	X = e.pageX
	Y = e.pageY
	
	for (var i = 0; i<30; i++) new Point(X, Y, 2)
	return false
})

setInterval(function() {
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spark]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/11/28/spark/"/>
    <updated>2012-11-28T18:45:00+01:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/11/28/spark</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point () {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', 0)
						.attr('cy', 0)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	this.start = Date.now()
	
	this.t = (this.start - start)/1000
	
	this.x = Math.cos(this.t)*200 + 400
	this.y = Math.sin(this.t)*200 + 300
	
	this.coeffX  = (rand(this.start*2) - this.start)/this.start
	this.coeffY  = (rand(this.start*2) - this.start)/this.start
	
	this.index = Point.list.length
	Point.list[this.index] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1000

	if (t>2) {
		this.svg.remove()
		delete Point.list[0]
	} else {
		this.x = this.x + this.coeffX*rand(t*2+1)*0.9
		this.y = this.y + this.coeffY*rand(t*2+1)*0.9
		
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', this.y)
		
		this.svg.attr('fill' , d3.rgb(
			  255
			, (255 - t*100)%256
			, (125  - t*125)%256
			).toString())
	}
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	new Point()
	new Point()
	new Point()
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[symetria]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/symetria/"/>
    <updated>2012-09-30T03:22:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/symetria</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy, sym) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff  = 120
	this.coeff2 = Math.random()
	
	this.sym = sym

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1250

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	
	if (this.sym == 0) {
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', this.y)
	} else if (this.sym == 1) {
		this.svg.attr('cx', 750 - this.x)
		this.svg.attr('cy', 750 - this.y)
	} else if (this.sym == 2) {
		this.svg.attr('cx', this.x)
		this.svg.attr('cy', 750 - this.y)
	} else if (this.sym == 3) {
		this.svg.attr('cx', 750 - this.x)
		this.svg.attr('cy', this.y)
	}
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<200) {
		for (var j = 0; j<4; j++){
			new Point(150, 150, j)
			new Point(150, 150, j)
		}
		i++
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[parametric 3D]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/parametric-3d/"/>
    <updated>2012-09-30T02:59:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/parametric-3d</id>
    <content type="html"><![CDATA[<!-- more -->


// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff  = 150
	this.coeff2 = Math.random()

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/1250

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 7)*this.coeff*this.coeff2 + this.coeff*this.coeff2*0.9
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<200) {
		new Point(600, 400)
		new Point(600, 400)
		new Point(600, 400)
		new Point(600, 400)
		new Point(600, 400)
		i++
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[let's randomize them all!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/lets-randomize-them-all/"/>
    <updated>2012-09-30T02:34:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/lets-randomize-them-all</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff  = 150
	this.coeff2 = Math.random()

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/700

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 7)*this.coeff*this.coeff2
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 7)*this.coeff*this.coeff2
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<400) {
		new Point(600, 400)
		i++
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 1);]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinus and cosinus love you forever]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-and-cosinus-love-you-forever/"/>
    <updated>2012-09-30T02:22:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-and-cosinus-love-you-forever</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff = 150

	this.start = Date.now()

	Point.list[Point.list.length] = this
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.pow(Math.cos(t), 3)*this.coeff + Math.pow(Math.sin(t), 5)*this.coeff
	this.y = this.y0 + Math.pow(Math.sin(t), 3)*this.coeff + Math.pow(Math.cos(t), 5)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()
  , i 			= 0
  
// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************

setInterval(function() {
	if (i<500) {
		i++
		new Point(600, 400)
	}
	Point.list.forEach(function(thiz, i){thiz.move()})
}, 10);
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinus slick]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-slick/"/>
    <updated>2012-09-30T00:01:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/sinus-slick</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	this.coeff = 70

	this.start = Date.now()
						
	Point.list.push(this)
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + t*this.coeff
	this.y = this.y0 + Math.sin(t)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
d3.timer(function() {

	new Point(0, 200+rand(400))
	new Point(0, 200+rand(400))
	new Point(0, 200+rand(400))

	Point.list.forEach(function(thiz, i){thiz.move()})
});

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[circles genesis]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/30/circles-genesis/"/>
    <updated>2012-09-30T00:00:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/30/circles-genesis</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	this.svg.attr('fill' , 'white')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
	
	var jet = rand(5)
	
	if 		(jet==0)	this.coeff = 30
	else if (jet==1)	this.coeff = 50
	else if (jet==2)	this.coeff = 70
	else if (jet==3)	this.coeff = 90
	else if (jet==4)	this.coeff = 110
	
	this.start = Date.now()
						
	Point.list.push(this)
}

Point.prototype.move 	= function () {
	var t = (Date.now() - this.start)/200

	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + Math.cos(t)*this.coeff
	this.y = this.y0 + Math.sin(t)*this.coeff
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
d3.timer(function() {
	new Point(600, 400)
	Point.list.forEach(function(thiz, i){thiz.move()})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[let's add other directions!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/27/lets-add-other-directions/"/>
    <updated>2012-09-27T00:01:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/27/lets-add-other-directions</id>
    <content type="html"><![CDATA[<!-- more -->

function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	if (rand(2)==0)	this.svg.attr('fill' , 'grey')	
	else			this.svg.attr('fill' , 'blue')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
						
	Point.list.push(this)
}

Point.prototype.move 	= function (v, l, direction) {
	var elapsed = Date.now() - start
	  , l = l || 800
	
	// this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	switch(direction) {
		case 0:
			this.x += rand(v)
			this.y += rand(v)
		break;
		case 1:
			this.x -= rand(v)
			this.y += rand(v)
		break;
		case 2:
			this.x += rand(v)
			this.y -= rand(v)
		break;
		case 3:
			this.x -= rand(v)
			this.y -= rand(v)
		break;
		case 4:
			this.x += rand(v)
		break;
		case 5:
			this.x -= rand(v)
		break;
		case 6:
			this.y += rand(v)
		break;
		case 7:
			this.y -= rand(v)
		break;

	}
	
	this.svg.attr('cx', this.x)
	this.svg.attr('cy', this.y)
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
var speeds  	= []
  , distances	= []
  , directions 	= []

for (var i =0; i<4000; i++) {
	speeds.push(rand(200)+1)
	distances.push(rand(2000)+1000)
	directions.push(rand(8))
	new Point(rand(20)+500, rand(20)+500)
}


d3.timer(function() {
	Point.list.forEach(function(thiz, i){thiz.move(speeds[i], distances[i], directions[i])})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my very first particules]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/25/my-very-first-particules/"/>
    <updated>2012-09-25T22:11:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/25/my-very-first-particules</id>
    <content type="html"><![CDATA[<!-- more -->

// ************************************************************************************
// POINT CLASS
// ************************************************************************************
function Point (cx, cy) {
	this.svg  = main_svg.append("svg:circle")
						.attr('cx', cx)
						.attr('cy', cy)
						.attr('r' , 1)	
						
	if (rand(2)==0)	this.svg.attr('fill' , 'grey')	
	else			this.svg.attr('fill' , 'blue')	
	
	this.x0 = cx
	this.y0 = cy
	
	this.x = cx
	this.y = cy
						
	Point.list.push(this)
}

Point.prototype.move 	= function (v, l) {
	var elapsed = Date.now() - start
	  , l = l || 3000
	
	this.svg.attr("transform", function(d) { return "translate(" + (elapsed/v)%l + ")"; })
	
	this.x = this.x0 + (elapsed/v)%l
	this.y = this.y0 + (elapsed/v)%l
}

Point.prototype.d 		= function (point) {
	return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))
}
// ************************************************************************************
// POINT CLASS - STATIC METHODS & ATTRIBUTES
// ************************************************************************************

Point.list = []

// ************************************************************************************
// GLOBAL VARIABLES
// ************************************************************************************
var main_svg 	= d3.select("body").append("svg:svg")
  , start 		= Date.now()

// ************************************************************************************
// FUNCTIONS HELPERS
// ************************************************************************************
  , rand = function (n) {
		return Math.floor(Math.random()*n)
    }
  
// ************************************************************************************
// MAIN SCRIPT
// ************************************************************************************
var speeds  	= []
  , distances	= []

for (var i =0; i<4000; i++) {
	speeds.push(rand(20)+1)
	distances.push(rand(2000)+1000)
	new Point(rand(800)-800, rand(800))
}


d3.timer(function() {
	Point.list.forEach(function(thiz, i){thiz.move(speeds[i], distances[i])})
});
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome!]]></title>
    <link href="http://karlotcha.herokuapp.com//blog/2012/09/21/welcome/"/>
    <updated>2012-09-21T22:16:00+02:00</updated>
    <id>http://karlotcha.herokuapp.com//blog/2012/09/21/welcome</id>
    <content type="html"><![CDATA[<p>Welcome adventurer! This is my blog, I post some stuff here.
Not sure about what you will find... Have fun!</p>
]]></content>
  </entry>
  
</feed>
